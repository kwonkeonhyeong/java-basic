
객체지향 프로그래밍의 대표적인 특징으로는 캡슐화, 상속, 다형성이 있다. 그 중에서 다형성은 객체지향 프로그래밍의 꽃이라 불린다.
앞서 학습한 캡슐화나 상속은 직관적으로 이해하기 쉽다. 반면에 다형성은 제대로 이해하기도 어렵고, 잘 활용하기는 더 어렵다.

다형성(Polymorphism)은 이름 그대로 "다양한 형태","여러 형태"를 뜻한다.
프로그래밍에서 다형성은 한 객체가 여러 타입의 객체로 취급될 수 있는 능력을 뜻한다. 보통 하나의 객체는 하나의 타입으로 고정되어 있다.
그런데 다형성을 사용하면 하나의 객체가 다른 타입으로 사용될 수 있다는 뜻이다.


다형성을 이해하기 위해서는 크게 2가지 핵심 이론을 알아야 한다.

- 다형적 참조
- 메서드 오버라이딩


** 다형적 참조 **

자바에서 부모 타입은 자신은 물론이고, 자신을 기준으로 모든 자식 타입을 참조할 수 있다. 이것이 바로 다양한 형태를 참조할 수 있다고 해서 다형적 참조라 한다.

다형적 참조 : 부모 타입의 변수가 자식 인스턴스 참조
Parent -> Child

다형적 참조의 한계 : 자식의 기능을 호출할 수 없다.
상속 관계는 부모 방향으로 찾아 올라갈 수는 있지만 자식 방향으로 찾아 내려갈 수는 없다.

다형적 참조의 핵심은 부모는 자식을 품을 수 있다는 것이다!!

Parent Poly = new Parent();
Parent Poly = new Child();
Parent Poly = new Grandson();

위 처럼 Parent 라는 타입 하나로 다양하게 참조가 가능하다!!

근데 왜 굳이 다형적 참조를 사용 하는 것일까? -> 생각해보기

업캐스팅(upcasting) : 부모 타입으로 변경
다운캐스팅(downcasting) : 자식 타입으로 변경

부모 타입을 자식 타입으로 변경하는 것을 다운캐스팅이라 한다. 반대로 부모 타입으로 변경하는 것은 업캐스팅이라 한다.

업캐스팅은 생략할 수 있다. 다운캐스팅은 생략할 수 없다. 참고로 업캐스팅은 매우 자주 사용하기 때문에 생략을 권장한다.

자바에서 부모는 자식을 담을 수 있다. 하지만 그 반대는 안된다. (꼭 필요하다면 다운캐스팅을 해야 한다.)


다운캐스팅과 주의점

업캐스팅은 생략해도 되고, 다운캐스팅은 왜 개발자가 직접 명시적으로 캐스팅을 해야할까?

!! 다운캐스팅을 잘못하면 심각한 런타임 오류가 발생할 수 있다. !!


** 업캐스팅이 안전하고 다운캐스팅이 위험한 이유

- 업캐스팅의 경우 이런 문제가 절대로 발생하지 않는다. 왜냐하면 객체를 생성하면 해당 타입의 상위 부모 타입은 모두 함께 생성된다!
- 따라서 위로만 타입을 변경하는 업캐스팅은 메모리 상에 인스턴스가 모두 존재하기 때문에 항상 안전하다. 따라서 캐스팅을 생략할 수 있다.

- 반면에 다운캐스팅의 경우 인스턴스에 존재하지 않는 하위 타입으로 캐스팅하는 문제가 발생할 수 있다.
- 왜냐하면 객체를 생성하면 부모타입은 모두 함께 생성되지만 자식 타입은 생성되지 않는다.
- 따라서 개발자가 이런 문제를 인지하고 사용해야 한다는 의미로 명시적으로 캐스팅을 해주어야 한다.



** 다형성과 메서드 오버라이딩

오버라이딩 된 메서드가 항상 우선권을 가진다!
오버라이딩은 부모 타입에서 정의한 기능을 자식 타입에서 재정의하는 것이다.
만약 자식에서도 오버라이딩 하고 손자에서도 같은 메서드를 오버라이딩을 하면 손자의 오버라이딩 메서드가 우선권을 가진다.
더 하위 자식의 오버라이딩 된 메서드가 우선권을 가지는 것이다.


* 다형적 참조 : 하나의 변수 타입으로 다양한 자식 인스턴스를 참조할 수 있는 기능
* 메서드 오버라이딩 : 기존 기능을 하위 타입에서 새로운 기능으로 재정의



